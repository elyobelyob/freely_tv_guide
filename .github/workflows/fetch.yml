name: Fetch Freely Guide

on:
  workflow_dispatch:
    inputs:
      start:
        description: "UNIX timestamp for day start (UTC)"
        required: true
        default: "auto"
        type: string
      nid:
        description: "Freely nid"
        required: false
        default: "64865"
        type: string
  schedule:
    - cron: "0 */6 * * *"

jobs:
  fetch:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Compute default START (UK midnight if not provided)
        id: when
        shell: bash
        run: |
          if [[ -z "${{ github.event.inputs.start }}" || "${{ github.event.inputs.start }}" == "auto" ]]; then
            TZ=Europe/London START=$(date -d "$(date +%Y-%m-%d) 00:00:00" +%s)
          else
            START=${{ github.event.inputs.start }}
          fi
          echo "start=$START" >> "$GITHUB_OUTPUT"
          echo "nid=${{ github.event.inputs.nid || '64865' }}" >> "$GITHUB_OUTPUT"

      - name: Fetch & split
        run: |
          python scripts/freely_fetch_split.py --nid "${{ steps.when.outputs.nid }}" --start "${{ steps.when.outputs.start }}" --out docs

      - name: Clear old mirrored images
        run: |
          rm -rf docs/img
          mkdir -p docs/img
          
      - name: Mirror images & rewrite channel JSON
        run: |
          python - <<'PY'
          import json, hashlib, pathlib, requests
      
          base = pathlib.Path('docs'); (base/'img').mkdir(parents=True, exist_ok=True)
          headers = {
            "User-Agent":"Mozilla/5.0",
            "Accept":"image/avif,image/webp,image/*,*/*;q=0.8",
            "Referer":"https://www.freely.co.uk/tv-guide",
          }
      
          def fetch_to_local(url):
            try:
              r = requests.get(url, headers=headers, timeout=20)
              r.raise_for_status()
              ct = r.headers.get('content-type','image/jpeg').lower()
              ext = ('.jpg' if 'jpeg' in ct or 'jpg' in ct else
                     '.png' if 'png' in ct else
                     '.webp' if 'webp' in ct else '')
              name = hashlib.sha1(url.encode()).hexdigest() + ext
              (base/'img'/name).write_bytes(r.content)
              return f"img/{name}"  # relative path; we'll prefix in the card
            except Exception:
              return None
      
          for p in (base/'channels').glob('*.json'):
            data = json.loads(p.read_text('utf-8'))
            changed = False
            for ev in data.get('events', []):
              url = ev.get('image') or (ev.get('_raw') or {}).get('image_url') or (ev.get('_raw') or {}).get('fallback_image_url')
              if not url: continue
              new = fetch_to_local(url)
              if new:
                ev['image'] = new
                changed = True
            if changed:
              p.write_text(json.dumps(data, ensure_ascii=False, indent=2), 'utf-8')
          PY


      - name: Commit outputs
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git add docs/
          if git diff --cached --quiet; then
            echo "No changes"
          else
            git commit -m "Update EPG: start=${{ steps.when.outputs.start }}"
            git push
          fi
