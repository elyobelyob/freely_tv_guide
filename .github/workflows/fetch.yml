name: Fetch Freely Guide

on:
  workflow_dispatch:
    inputs:
      start:
        description: "UNIX timestamp (leave blank or 'auto' for UK midnight today)"
        required: false
        type: string
        default: "auto"
      nid:
        description: "Freely nid"
        required: false
        type: string
        default: "64865"

  schedule:
    - cron: "5 4 * * *"   # runs daily at 04:05 UTC

jobs:
  fetch:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Compute START (UTC midnight of UK day unless provided)
        id: when
        shell: bash
        run: |
          if [[ -z "${{ github.event.inputs.start }}" || "${{ github.event.inputs.start }}" == "auto" ]]; then
            UKDATE=$(TZ=Europe/London date +%Y-%m-%d)          # e.g. 2025-10-04
            START=$(date -u -d "$UKDATE 00:00:00" +%s)         # 00:00:00 UTC of that calendar date
          else
            START="${{ github.event.inputs.start }}"
          fi
          echo "start=$START" >> "$GITHUB_OUTPUT"
          echo "nid=${{ github.event.inputs.nid || '64865' }}" >> "$GITHUB_OUTPUT"

      - name: Show resolved START
        run: |
          echo "start=${{ steps.when.outputs.start }}"
          TZ=Europe/London date -d @${{ steps.when.outputs.start }} "+UK  %Y-%m-%d %H:%M (%Z)"
          date -u -d @${{ steps.when.outputs.start }} "+UTC %Y-%m-%d %H:%M"

      - name: Fetch & split
        run: |
          python scripts/freely_fetch_split.py \
            --nid "${{ steps.when.outputs.nid }}" \
            --start "${{ steps.when.outputs.start }}" \
            --out docs

      - name: Mirror images from raw payload & rewrite JSON (robust)
        env:
          IMG_WORKERS: "16"
          IMG_HOURS_AHEAD: "18"
          IMG_MAX_PER_CHANNEL: "10"
          IMG_TIMEOUT_CONNECT: "4"
          IMG_TIMEOUT_READ: "8"
        run: |
          python - <<'PY'
          import json, hashlib, pathlib, requests, concurrent.futures, os, datetime, sys
          from urllib.parse import urlparse
      
          base = pathlib.Path('docs')
          chan_dir = base/'channels'
          raw_dir  = base/'raw'
          img_prog = base/'img'/'programmes'
          img_chan = base/'img'/'channels'
          img_prog.mkdir(parents=True, exist_ok=True)
          img_chan.mkdir(parents=True, exist_ok=True)
      
          # placeholders (always exist)
          for p, txt, wh in [
            (img_prog/'placeholder.svg', 'No image', (540,360)),
            (img_chan/'placeholder.svg', 'No logo',  (256,256)),
          ]:
            if not p.exists():
              w,h = wh
              p.write_text(
                f'<svg xmlns="http://www.w3.org/2000/svg" width="{w}" height="{h}">'
                f'<rect width="100%" height="100%" fill="#e5e7eb"/>'
                f'<text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" '
                f'font-family="Arial,Helvetica,sans-serif" font-size="20" fill="#6b7280">{txt}</text>'
                f'</svg>', 'utf-8'
              )
      
          # pick the most recent raw guide (this run)
          raw_files = sorted(raw_dir.glob('guide_*.json'), key=lambda p: p.stat().st_mtime, reverse=True)
          raw_payload = {}
          if raw_files:
            try:
              raw_payload = json.loads(raw_files[0].read_text('utf-8'))
            except Exception:
              pass
      
          # extract programme image URLs from the raw payload
          def walk_events(obj):
            if isinstance(obj, dict):
              for k,v in obj.items():
                if k in ('events','event','schedule','programs','programmes'):
                  if isinstance(v, list):
                    for ev in v:
                      if isinstance(ev, dict):
                        yield ev
                else:
                  yield from walk_events(v)
            elif isinstance(obj, list):
              for it in obj:
                yield from walk_events(it)
      
          prog_url_map = {}   # keys like ('uuid',val) or ('pid',val) or ('t', start|name) -> URL
          def first_url(ev):
            for key in ('image_url','imageUrl','image','poster','thumbnail','fallback_image_url'):
              val = ev.get(key)
              if isinstance(val,str) and val.startswith('http'):
                return val
            return None
      
          for ev in walk_events(raw_payload):
            url = first_url(ev)
            if not url: 
              continue
            if ev.get('uuid'):
              prog_url_map[('uuid', ev['uuid'])] = url
            if ev.get('program_id'):
              prog_url_map[('pid', ev['program_id'])] = url
            st = ev.get('start_time') or ev.get('startTime') or ev.get('time')
            nm = ev.get('name') or ev.get('title') or ev.get('main_title')
            if st and nm:
              prog_url_map[('t', f"{st}|{nm}")] = url
      
          # session for downloads
          session = requests.Session()
          session.headers.update({
            "User-Agent":"Mozilla/5.0 (freely_tv_guide)",
            "Accept":"image/avif,image/webp,image/*,*/*;q=0.8",
            "Referer":"https://www.freeviewplay.co.uk/",
          })
          TCON = float(os.getenv('IMG_TIMEOUT_CONNECT','4'))
          TREAD = float(os.getenv('IMG_TIMEOUT_READ','8'))
      
          def guess_ext_from_headers(url, content_type=None):
            if content_type:
              ct = content_type.lower()
              if 'jpeg' in ct or 'jpg' in ct: return '.jpg'
              if 'png'  in ct: return '.png'
              if 'webp' in ct: return '.webp'
              if 'svg'  in ct: return '.svg'
            path = urlparse(url).path.lower()
            for e in ('.jpg','.jpeg','.png','.webp','.svg'):
              if path.endswith(e): return e
            return '.jpg'
      
          def ensure_local(kind, url):
            """Return Path or None. Only write if it's a valid image response."""
            if not isinstance(url,str) or not url.startswith('http'):
              return None
            h = hashlib.sha1(url.encode()).hexdigest()
            dest_dir = img_chan if kind == 'channel' else img_prog
            # reuse if already present (any known ext)
            for ext in ('.jpg','.jpeg','.png','.webp','.svg'):
              f = dest_dir/(h+ext)
              if f.exists():
                return f
            try:
              r = session.get(url, timeout=(TCON, TREAD), allow_redirects=True)
              r.raise_for_status()
              ct = r.headers.get('content-type','').lower()
              if 'image' not in ct and not urlparse(url).path.lower().endswith(('.jpg','.jpeg','.png','.webp','.svg')):
                return None
              if len(r.content) < 1024 and 'svg' not in ct:
                return None
              ext = guess_ext_from_headers(url, ct)
              f = dest_dir/(h+ext)
              f.write_bytes(r.content)
              return f
            except Exception:
              return None
      
          HOURS_AHEAD = int(os.getenv('IMG_HOURS_AHEAD','18'))
          MAX_PER_CH   = int(os.getenv('IMG_MAX_PER_CHANNEL','10'))
          now = datetime.datetime.utcnow().replace(tzinfo=datetime.timezone.utc)
          ahead = now + datetime.timedelta(hours=HOURS_AHEAD)
      
          # gather jobs and rewrite JSON
          json_files = list(chan_dir.glob('*.json'))
          ref_prog = set(['placeholder.svg'])
          ref_chan = set(['placeholder.svg'])
      
          def find_prog_url(ev):
            raw = ev.get('_raw') or {}
            for tag,keyname in (('uuid','uuid'),('pid','program_id')):
              val = raw.get(keyname)
              if val and ('uuid',val) in prog_url_map:
                return prog_url_map[('uuid',val)]
              if val and ('pid',val) in prog_url_map:
                return prog_url_map[('pid',val)]
            st = raw.get('start_time') or ev.get('startTime')
            nm = ev.get('name') or raw.get('main_title') or raw.get('title')
            if st and nm and ('t', f"{st}|{nm}") in prog_url_map:
              return prog_url_map[('t', f"{st}|{nm}")]
            return None
      
          for p in json_files:
            data = json.loads(p.read_text('utf-8'))
            ch   = data.get('channel') or {}
            cid  = ch.get('id')
      
            # channel logo: download only if JSON has a remote URL (we donâ€™t anymore, so usually skip)
            logo = ch.get('logo')
            if isinstance(logo, str) and logo.startswith('http'):
              lf = ensure_local('channel', logo)
              ch['logo'] = ('img/channels/'+lf.name) if lf else 'img/channels/placeholder.svg'
            if isinstance(ch.get('logo'), str) and ch['logo'].startswith('img/channels/'):
              ref_chan.add(pathlib.Path(ch['logo']).name)
            else:
              ch['logo'] = 'img/channels/placeholder.svg'
      
            # events
            kept = 0
            for ev in data.get('events', []):
              # time filter
              st = ev.get('startTime')
              try:
                st_dt = datetime.datetime.fromisoformat(str(st).replace('Z','+00:00').replace('+0000','+00:00')) if st else None
              except Exception:
                st_dt = None
              if st_dt and st_dt > ahead:
                ev['image'] = 'img/programmes/placeholder.svg'
                continue
      
              if MAX_PER_CH and kept >= MAX_PER_CH:
                ev['image'] = 'img/programmes/placeholder.svg'
                continue
      
              u = find_prog_url(ev)
              if u:
                pf = ensure_local('programme', u)
                if pf:
                  ev['image'] = 'img/programmes/'+pf.name
                  ref_prog.add(pf.name)
                  kept += 1
                  continue
      
              ev['image'] = 'img/programmes/placeholder.svg'
      
            p.write_text(json.dumps(data, ensure_as

      - name: Migrate legacy images to subfolders & fix JSON refs
        run: |
          python - <<'PY'
          import pathlib, json, shutil

          root = pathlib.Path('docs')
          img = root/'img'
          prog = img/'programmes'
          chan = img/'channels'
          prog.mkdir(parents=True, exist_ok=True)
          chan.mkdir(parents=True, exist_ok=True)

          # 1) Move legacy image files from docs/img/* -> docs/img/programmes/*
          moved = 0
          for f in img.glob('*'):
            if f.is_file() and f.suffix.lower() in ('.jpg','.jpeg','.png','.webp','.svg'):
              if f.name not in ('placeholder.svg','index.html'):
                dest = prog/f.name
                if not dest.exists():
                  shutil.move(str(f), str(dest))
                  moved += 1

          # 2) Rewrite JSON image paths: img/<name> -> img/programmes/<name>
          fixed = 0
          ch_dir = root/'channels'
          for p in ch_dir.glob('*.json'):
            data = json.loads(p.read_text('utf-8'))
            # events
            for ev in data.get('events', []):
              imgp = ev.get('image') or ''
              if isinstance(imgp, str) and imgp.startswith('img/') and not imgp.startswith('img/programmes/') and not imgp.startswith('img/channels/'):
                ev['image'] = 'img/programmes/' + imgp.split('/',1)[1]
                fixed += 1
            # channel logo (if any) -> channels/
            ch = data.get('channel') or {}
            logo = ch.get('logo')
            if isinstance(logo, str) and logo.startswith('img/') and not logo.startswith('img/channels/'):
              src = root/logo
              dest = chan/src.name
              if src.exists() and not dest.exists():
                shutil.move(str(src), str(dest))
              ch['logo'] = 'img/channels/' + src.name
              fixed += 1
            p.write_text(json.dumps(data, ensure_ascii=False, indent=2), 'utf-8')

          print(f"migrated_files={moved} fixed_json_refs={fixed}")
          PY

      - name: Update README channel list
        run: |
          python - <<'PY'
          import json, pathlib, re
          idx = json.loads(pathlib.Path('docs/index.json').read_text('utf-8'))
          base = 'https://elyobelyob.github.io/freely_tv_guide/'
          rows = ['| ID | Name | JSON |','|---:|---|---|']
          for c in idx.get('channels', []):
              rows.append(f"| {c['id']} | {c['name']} | [{c['path']}]({base}{c['path']}) |")
          table = '\n'.join(rows)

          readme_path = pathlib.Path('README.md')
          readme = readme_path.read_text('utf-8')
          start, end = '<!-- CHANNELS_START -->', '<!-- CHANNELS_END -->'
          pattern = re.compile(rf"{start}[\s\S]*?{end}", re.MULTILINE)
          if start in readme and end in readme:
            readme = pattern.sub(f"{start}\n{table}\n{end}", readme)
          else:
            readme += f"\n\n## Channel list\n{start}\n{table}\n{end}\n"
          readme_path.write_text(readme, 'utf-8')
          PY

      - name: Add index pages for image folders (and disable Jekyll)
        run: |
          python - <<'PY'
          import pathlib, html

          root = pathlib.Path('docs')
          (root/'.nojekyll').write_text('', encoding='utf-8')  # ensure static serving

          def write_index(dirpath: pathlib.Path, title: str):
            dirpath.mkdir(parents=True, exist_ok=True)
            files = sorted(p.name for p in dirpath.glob('*') if p.is_file())
            thumbs = ''.join(
              f"<a href='{html.escape(n)}'><img src='{html.escape(n)}' alt='{html.escape(n)}'></a>"
              for n in files
            )
            html_doc = f"""<!doctype html>
            <meta charset="utf-8"><title>{html.escape(title)}</title>
            <style>
              body{{font-family:system-ui,Arial,sans-serif;padding:16px}}
              .grid{{display:grid;grid-template-columns:repeat(auto-fill,minmax(140px,1fr));gap:10px}}
              img{{max-width:100%;height:auto;border-radius:8px}}
              a{{text-decoration:none}}
            </style>
            <h1>{html.escape(title)}</h1>
            <div class="grid">{thumbs}</div>
            """
            (dirpath/'index.html').write_text(html_doc, encoding='utf-8')

          write_index(root/'img'/'programmes', 'Programme images')
          write_index(root/'img'/'channels',   'Channel logos')
          PY

      - name: Build stats page
        run: |
          python - <<'PY'
          import json, pathlib, datetime

          base = pathlib.Path('docs')
          (base/'.nojekyll').write_text('', encoding='utf-8')  # ensure static serving

          chan_dir = base/'channels'
          img_prog = base/'img'/'programmes'
          img_chan = base/'img'/'channels'
          stats_dir = base/'stats'
          stats_dir.mkdir(parents=True, exist_ok=True)

          # channels from index.json if present (falls back to file count)
          idx_path = base/'index.json'
          if idx_path.exists():
              idx = json.loads(idx_path.read_text('utf-8'))
              channels = idx.get('channels', [])
              channel_count = len(channels)
              start = idx.get('start')
          else:
              channels = sorted(p.name for p in chan_dir.glob('*.json'))
              channel_count = len(channels)
              start = None

          # count images (ignore placeholders)
          def count_images(p):
              if not p.exists(): return 0
              return sum(1 for f in p.glob('*') if f.is_file() and f.name != 'placeholder.svg')

          prog_images = count_images(img_prog)
          chan_images = count_images(img_chan)

          stats = {
            "channels": channel_count,
            "programme_images": prog_images,
            "channel_logos": chan_images,
            "start": start,
            "generated_utc": datetime.datetime.utcnow().isoformat(timespec='seconds') + 'Z'
          }
          (stats_dir/'stats.json').write_text(json.dumps(stats, indent=2), 'utf-8')

          # simple HTML
          html = f"""<!doctype html>
          <meta charset="utf-8">
          <title>Freely TV Guide â€” Stats</title>
          <style>
            :root {{ --bg:#0b1220; --fg:#e6eaf2; --muted:#9aa4b2; --card:#111a2e; }}
            body{{margin:0;background:var(--bg);color:var(--fg);font:16px/1.5 system-ui,Arial,sans-serif;padding:32px}}
            h1{{margin:0 0 18px 0;font-size:28px}}
            .grid{{display:grid;grid-template-columns:repeat(auto-fit,minmax(220px,1fr));gap:14px;margin:18px 0 8px}}
            .card{{background:var(--card);padding:18px 22px;border-radius:14px;box-shadow:0 1px 3px rgba(0,0,0,.4)}}
            .k{{font-size:12px;color:var(--muted);text-transform:uppercase;letter-spacing:.06em}}
            .v{{font-size:28px;font-weight:700}}
            a{{color:#7cc7ff;text-decoration:none}}
            .links a{{margin-right:14px}}
            .small{{color:var(--muted);font-size:13px}}
          </style>
          <h1>Freely TV Guide â€” Stats</h1>
          <div class="grid">
            <div class="card"><div class="k">Channels</div><div class="v">{channel_count}</div></div>
            <div class="card"><div class="k">Programme images</div><div class="v">{prog_images}</div></div>
            <div class="card"><div class="k">Channel logos</div><div class="v">{chan_images}</div></div>
          </div>
          <p class="small">Start timestamp: {start if start is not None else 'n/a'}<br>
          Generated (UTC): {stats['generated_utc']}</p>
          <p class="links">
            <a href="../index.json">index.json</a>
            <a href="../img/programmes/">programme images</a>
            <a href="../img/channels/">channel logos</a>
            <a href="stats.json">stats.json</a>
          </p>
          """
          (stats_dir/'index.html').write_text(html, 'utf-8')
          PY

      - name: Commit outputs
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git add -A
          if git diff --cached --quiet; then
            echo "No changes"
          else
            git commit -m "Update EPG: start=${{ steps.when.outputs.start }}"
            git push
          fi
